AWSTemplateFormatVersion: 2010-09-09
# Custom string transformation
Parameters:
  SubnetId1:
    Description: One or more Subnet IDs corresponding to the Subnet(s) that the Lambda
      function can use to access the Neptune cluster. (e.g. subnet1,subnet2)
    Type: String
  SubnetId2:
    Description: One or more Subnet IDs corresponding to the Subnet(s) that the Lambda
      function can use to access the Neptune cluster. (e.g. subnet1,subnet2)
    Type: String
  SubnetId3:
    Description: One or more Subnet IDs corresponding to the Subnet(s) that the Lambda
      function can use to access the Neptune cluster. (e.g. subnet1,subnet2)
    Type: String
  VPCId:
    Description: VPC ID
    Type: String
  S3Bucket:
    Type: String
    Description: Bucket where build assets are kept
    Default: riskandfraudlogs-assets
  SecurityGroup:
    Type: String
    Description: Security Group created in base template for reuse
Resources:
  TransformExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                # Action: ['logs:*']
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:*'
  TransformFunction:
    Type: AWS::Lambda::Function
    Properties:
#      VpcConfig:
#        SubnetIds:
#        - !Ref SubnetId1
#        - !Ref SubnetId2
#        - !Ref SubnetId3
      Code:
        ZipFile: |
          import traceback

          def handler(event, context):
              response = {
                  "requestId": event["requestId"],
                  "status": "success"
              }
              try:
                  operation = event["params"]["Operation"]
                  input = event["params"]["InputString"]
                  no_param_string_funcs = ["Upper", "Lower", "Capitalize", "Title", "SwapCase"]
                  if operation in no_param_string_funcs:
                      response["fragment"] = getattr(input, operation.lower())()
                  elif operation == "Strip":
                      chars = None
                      if "Chars" in event["params"]:
                          chars = event["params"]["Chars"]
                      response["fragment"] = input.strip(chars)
                  elif operation == "Replace":
                      old = event["params"]["Old"]
                      new = event["params"]["New"]
                      response["fragment"] = input.replace(old, new)
                  elif operation == "MaxLength":
                      length = int(event["params"]["Length"])
                      if len(input) <= length:
                          response["fragment"] = input
                      elif "StripFrom" in event["params"]:
                          if event["params"]["StripFrom"] == "Left":
                              response["fragment"] = input[len(input)-length:]
                          elif event["params"]["StripFrom"] != "Right":
                              response["status"] = "failure"
                      else:
                          response["fragment"] = input[:length]
                  else:
                      response["status"] = "failure"
              except Exception as e:
                  traceback.print_exc()
                  response["status"] = "failure"
                  response["errorMessage"] = str(e)
              return response

      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt TransformExecutionRole.Arn
      ReservedConcurrentExecutions: 8
  TransformFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt TransformFunction.Arn
      Principal: 'cloudformation.amazonaws.com'
  Transform:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: 'String'
      Description: Provides various string processing functions
      FunctionName: !GetAtt TransformFunction.Arn
Outputs:
  S3Bucket:
    Description: Bucket used by template.
    Value: !Ref S3Bucket
  SubnetId1:
    Description: One or more Subnet IDs corresponding to the Subnet(s) that the Lambda can use
    Value: !Ref SubnetId1
  SubnetId2:
    Description: One or more Subnet IDs corresponding to the Subnet(s) that the Lambda can use
    Value: !Ref SubnetId2
  SubnetId3:
    Description: One or more Subnet IDs corresponding to the Subnet(s) that the Lambda can use
    Value: !Ref SubnetId3
  SecurityGroup:
    Description: Security Group created in base template for reuse
    Value: !Ref SecurityGroup



